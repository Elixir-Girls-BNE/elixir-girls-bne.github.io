---
title: Elixir Girls Guides Slackir App retrieving stored data
---
<h1>Retrieving from database</h1>
  <p> Note: we are going to be adding all these code into <em>web/channels/random_channel.ex</em> </p>
  <p>Everytime when you refresh your page, you lose the message history and that is not ideal if you want to know what has been discussed.
  We have all these stored messages in our database, and we want to retrieve it when someone logs in. Therefore, we will need to retrieve these messages and display them in the chat dialog.</p>
  <h2>Perform a callback after join</h2>
  <p>Go to the <bold>join</bold> function, and add the line just below <bold>if authorized?(payload) do</bold></p>
  <p>We are going to send a message contaning our self PID(Process Identifier) as the first parameter. The second parameter is a message to run a function called <em> after_join </em>. This function is identified by an atom type.</p>

  <% code("elixir") do %>
  def join("random:lobby", payload, socket) do
    if authorized?(payload) do
      send self(), :after_join #<-- Add this line
      {:ok, socket}
    else
      {:error, %{reason: "unauthorized"}}
    end
  end
  <% end %>

<h4>What does send do?</h4>
<p><bold>send</bold> sends a message,<bold>:after_join</bold>, with it's PID generated by the function ,<bold>self()</bold>. We want to be able to run the after join task asynchronously. Lets look at how we should receive the <em>:after_join</em> message</p>
<h1>Receiving a message in a callback</h1>
<p>We now know that a message identified by the atom <em>:after_join</em> is being sent.
Phoenix provides us with a function called <bold>handle_info</bold> to be able to receive that message and do something with it.
Insert the following code after the <em>join</em> function </p>
  <% code("elixir") do %>
  def handle_info(:after_join, socket) do
    messages = Slackir.Repo.all(Slackir.Message)
    msgs =
      messages |> Enum.map(&to_msg/1)

    push socket, "messages_history", %{ messages: msgs }
    { :noreply, socket }
  end

  defp to_msg(msg) do
    %{
      name: msg.name,
      message: msg.message
    }
  end
  <% end %>

  <h1>Retrieve all messages from our database</h2>
  <p>Phew, that looked like a lot is going on in the handle_info function. Lets breakdown the code to understand what is going on.</p>
  <p>
    As we have seen previously, Slackir.Repo provides us with an interface to communicate to the database. Rather than doing an insert!, we want to use the <bold>all</bold>
    function to retrieve all the messages from our database.
  </p>
  <p>
    We then, pipe the retrieved <em>messages</em> into a <bold>map</bold> function provided by the <bold>Enum</bold> module.
    <em>Map</em> applies the <bold>to_msg</bold> function onto every element in <em>messages</em>
    <em>Note: Please ask your mentor to explain how Enum.map works if you are unsure about it :)</em>
  </p>
  <p>
    There is of course the & operator that is used as a shorthand to convert the expression into a function.
    All this does is convert <em>to_msg</em> into a function that takes only 1 parameter(arity), which is defined as a private method.
    Private methods in Elixir are identified by a <em>p</em> at the end of the word <em>def</em>
    We are trying to format the messages that we have retrieved into a proper structure
  </p>
  <h1>Passing the messages back to the browser</h1>
  <p>Finally, we want to push our list of messages to the socket via the <bold>push</bold> function.</p>
  <p>We are using <em>push</em> instead of <em>broadcast</em>, because we only want to display it to the current user that has just joined the channel</P>

  <h1>Render the messages in the browser</h1>
  <p>Add the below code to the <em>web/static/js/socket.js</em> file</p>
  <% code("js") do %>
    channel.on('messages_history', messages => {
      let messages_list = messages["messages"];

      messages_list.forEach( function(msg) {
        list.append(`<b>${msg["name"] || 'Anonymous'}:</b> ${msg["message"]}<br>`);
        list.prop({scrollTop: list.prop("scrollHeight")});
      });
    });
  <% end %>
  <p>This is the final step, really. We need display the messages in our browser by iterating through our list</p>
